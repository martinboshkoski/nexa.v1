import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { extractUrls, fetchLinkPreview } from '../../utils/linkPreview';
import ApiService from '../../services/api';
import styles from '../../styles/terminal/SocialFeed.module.css';

const SocialFeed = () => {
  const { token } = useAuth();
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [newPostContent, setNewPostContent] = useState('');
  const [posting, setPosting] = useState(false);
  const [filter, setFilter] = useState('all');
  const [placeholderIndex, setPlaceholderIndex] = useState(0);

  // Rotating placeholder texts
  const placeholderTexts = [
    '–ö–∞–∂–µ—Ç–µ —à—Ç–æ –∏–º–∞ –Ω–æ–≤–æ —Å–æ –í–∞—à–∞—Ç–∞ —Ñ–∏—Ä–º–∞?',
    '–û–±—ò–∞–≤–µ—Ç–µ –∏–Ω—Ñ–æ –∑–∞ –í–∞—à–∞—Ç–∞ –Ω–æ–≤–∞ —É—Å–ª—É–≥–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥',
    '–°–ø–æ–¥–µ–ª–µ—Ç–µ —Å–æ–≤–µ—Ç–∏ –∑–∞ –í–∞—à–∞—Ç–∞ –∏–Ω–¥—É—Å—Ç—Ä–∏—ò–∞',
    '–ö–∞–∂–µ—Ç–µ –∑–∞ –í–∞—à–∏—Ç–µ –Ω–∞—ò–Ω–æ–≤–∏ –¥–æ—Å—Ç–∏–≥–Ω—É–≤–∞—ö–∞',
    '–û–±—ò–∞–≤–µ—Ç–µ –∑–∞ –Ω–∞—Å—Ç–∞–Ω–∏ –≤–æ –í–∞—à–∞—Ç–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞',
    '–°–ø–æ–¥–µ–ª–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ–¥ –í–∞—à–∏–æ—Ç —Å–µ–∫—Ç–æ—Ä'
  ];

  // Rotate placeholder text every 3.5 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setPlaceholderIndex((prevIndex) => (prevIndex + 1) % placeholderTexts.length);
    }, 3500);

    return () => clearInterval(interval);
  }, [placeholderTexts.length]);

  // Fetch posts
  const fetchPosts = async () => {
    try {
      setLoading(true);
      const data = await ApiService.request(`/social/newsfeed?filter=${filter}`);
      setPosts(data?.posts || []); // Ensure posts is an array
    } catch (error) {
      setError('–ù–∞—Å—Ç–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –æ–±—ò–∞–≤–∏—Ç–µ. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
      setPosts([]); // Ensure posts is an array even on error
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, [filter, token]); // eslint-disable-line react-hooks/exhaustive-deps 
  // Added token to dependency array as it's used in ApiService, and fetchPosts is called on mount.

  // Create new post
  const handleCreatePost = async (e) => {
    e.preventDefault();
    if (!newPostContent.trim()) return;

    try {
      setPosting(true);
      const response = await ApiService.request('/social/posts', {
        method: 'POST',
        body: JSON.stringify({
          content: newPostContent,
        }),
      });

      // The API returns { message, post }, so we need to extract the post
      const newPost = response.post;
      
      // Add the new post to the beginning of the posts array for immediate display
      setPosts(prevPosts => [newPost, ...prevPosts]);
      setNewPostContent('');
    } catch (error) {
      console.error('Error creating post:', error);
      
      // Handle specific error types
      if (error.isAuthError || error.status === 401) {
        setError('–°–µ—Å–∏—ò–∞—Ç–∞ –µ –∏—Å—Ç–µ—á–µ–Ω–∞. –ù–∞—ò–∞–≤–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
      } else {
        setError('–ù–∞—Å—Ç–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫—Ä–µ–∏—Ä–∞—ö–µ –Ω–∞ –æ–±—ò–∞–≤–∞—Ç–∞. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
      }
    } finally {
      setPosting(false);
    }
  };

  // Add comment
  const handleComment = async (postId, commentContent) => {
    if (!commentContent.trim()) return;

    try {
      const response = await ApiService.request(`/social/posts/${postId}/comments`, {
        method: 'POST',
        body: JSON.stringify({
          content: commentContent,
        }),
      });

      // Backend returns { message, comment, commentsCount }
      const newComment = response.comment;

      setPosts(prevPosts => prevPosts.map(post =>
        post._id === postId
          ? { ...post, comments: [...(post.comments || []), newComment] } // Add the actual comment object
          : post
      ));
    } catch (error) {
      // setError('–ù–∞—Å—Ç–∞–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞—ö–µ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–æ—Ç.'); // Optional: user-facing error
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);

    if (diffInSeconds < 60) {
      return `–ø—Ä–µ–¥ ${diffInSeconds}—Å`;
    }
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    if (diffInMinutes < 60) {
      return `–ø—Ä–µ–¥ ${diffInMinutes}–º`;
    }
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) {
      return `–ø—Ä–µ–¥ ${diffInHours}—á`;
    }
    const diffInDays = Math.floor(diffInHours / 24);
    return `–ø—Ä–µ–¥ ${diffInDays}–¥`;
  };

  const getPostTypeIcon = (postType) => {
    switch (postType) {
      case 'admin_news': return 'üì∞';
      case 'admin_investment': return 'üí∞';
      default: return 'üë§'; // Changed from 'üè¢' to represent user/company post more generally
    }
  };

  if (loading && posts.length === 0) { // Show loading only if there are no posts yet
    return <div className={styles.loading}>–°–µ –≤—á–∏—Ç—É–≤–∞–∞—Ç –æ–±—ò–∞–≤–∏...</div>;
  }

  return (
    <div className={styles.socialFeed}>
      {/* Create new post */}
      <div className={styles.createPost}>
        <form onSubmit={handleCreatePost}>
          <textarea
            value={newPostContent}
            onChange={(e) => setNewPostContent(e.target.value)}
            placeholder={placeholderTexts[placeholderIndex]}
            className={styles.postTextarea}
            rows={3}
          />
          <div className={styles.postActions}>
            <button
              type="submit"
              disabled={posting || !newPostContent.trim()}
              className={styles.postButton}
            >
              {posting ? '–û–±—ò–∞–≤—É–≤–∞—ö–µ...' : '–û–±—ò–∞–≤–∏'}
            </button>
          </div>
        </form>
      </div>

      {/* Filter buttons */}
      <div className={styles.filterSection}>
        <button
          className={`${styles.filterButton} ${filter === 'all' ? styles.active : ''}`}
          onClick={() => setFilter('all')}
        >
          –°–∏—Ç–µ –æ–±—ò–∞–≤–∏
        </button>
        <button
          className={`${styles.filterButton} ${filter === 'posts' ? styles.active : ''}`}
          onClick={() => setFilter('posts')}
        >
          –ö–æ—Ä–∏—Å–Ω–∏—á–∫–∏ –æ–±—ò–∞–≤–∏
        </button>
        <button
          className={`${styles.filterButton} ${filter === 'news' ? styles.active : ''}`}
          onClick={() => setFilter('news')}
        >
          –í–µ—Å—Ç–∏
        </button>
        <button
          className={`${styles.filterButton} ${filter === 'investments' ? styles.active : ''}`}
          onClick={() => setFilter('investments')}
        >
          –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        </button>
      </div>

      {error && (
        <div className={styles.error}>
          {error}
        </div>
      )}

      {/* Posts list */}
      {!loading && posts.length === 0 && !error && (
         <div className={styles.noPosts}>–ù–µ–º–∞ –æ–±—ò–∞–≤–∏ –∑–∞ –ø—Ä–∏–∫–∞–∂—É–≤–∞—ö–µ.</div>
      )}
      <div className={styles.postsList}>
        {posts.map(post => (
          <PostCard
            key={post._id}
            post={post}
            // onLike={handleLike} // Removing like functionality
            onComment={handleComment}
            formatDate={formatDate}
            getPostTypeIcon={getPostTypeIcon}
            currentUser={/* Pass current user if needed for edit/delete, not available from useAuth directly here */ null}
          />
        ))}
      </div>
    </div>
  );
};

// Individual Post Component
const PostCard = ({ post, /* onLike, */ onComment, formatDate, getPostTypeIcon, currentUser }) => { // Removed onLike
  const [showComments, setShowComments] = useState(false);
  const [commentContent, setCommentContent] = useState('');
  const [linkPreview, setLinkPreview] = useState(null);
  const { user } = useAuth(); // Get current user for comment author

  // Extract URLs from post content for link preview
  useEffect(() => {
    if (post && post.content) {
      const urls = extractUrls(post.content);
      if (urls.length > 0) {
        fetchLinkPreview(urls[0]).then(preview => {
          if (preview) {
            setLinkPreview(preview);
          }
        }).catch(err => {
          // Silently handle link preview errors
        });
      } else {
        setLinkPreview(null); // Reset preview if no URLs
      }
    } else {
      setLinkPreview(null); // Reset preview if no content
    }
  }, [post.content]);

  const handleCommentSubmit = (e) => {
    e.preventDefault();
    if (!commentContent.trim()) return;
    onComment(post._id, commentContent);
    setCommentContent('');
  };

  const getPostTypeLabel = (postType) => {
    switch (postType) {
      case 'admin_news': return '–í–µ—Å—Ç';
      case 'admin_investment': return '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—ò–∞';
      default: return '–û–±—ò–∞–≤–∞'; // General user post
    }
  };
  
  const postUser = post.user || post.author || post.companyInfo; // Adapt based on actual data structure
  const userName = postUser?.name || postUser?.username || '–ê–Ω–æ–Ω–∏–º–µ–Ω –∫–æ—Ä–∏—Å–Ω–∏–∫';
  const userAvatar = postUser?.profilePicture || postUser?.avatar || ''; // Default avatar if none

  return (
    <div className={styles.postCard}>
      {/* Company Information Section - 1/3 of the post */}
      <div className={styles.companySection}> {/* Ensure this class is styled for 1/3 width */}
        <div className={styles.companyDetails}>
          <div className={styles.companyName}>
            {/* Use companyName from post root, or fallback to author's company details */}
            {post.companyName || postUser?.companyName || userName}
          </div>
          {/* Display company details from post root if available, otherwise from postUser */}
          {(post.companyWebsite || postUser?.website) && (
            <a href={post.companyWebsite || postUser.website} target="_blank" rel="noopener noreferrer" className={styles.companyWebsite}>
              üåê {post.companyWebsite || postUser.website}
            </a>
          )}
          {(post.companyEmail || postUser?.email) && (
            <a href={`mailto:${post.companyEmail || postUser.email}`} className={styles.companyEmail}>
              ‚úâÔ∏è {post.companyEmail || postUser.email}
            </a>
          )}
          {/* Assuming business type might be stored in companyIndustry or a new field */}
          {(post.companyIndustry || postUser?.industry) && (
            <div className={styles.companyIndustry}>
              –¢–∏–ø –Ω–∞ –±–∏–∑–Ω–∏—Å: {post.companyIndustry || postUser.industry}
            </div>
          )}
           {/* Display company mission if available */}
          {(post.companyMission || postUser?.companyMission) && (
            <div className={styles.companyMission}>
              {post.companyMission || postUser.companyMission}
            </div>
          )}
        </div>
      </div>

      {/* Main Post Content Section - 2/3 of the post */}
      <div className={styles.postMainContent}> {/* Ensure this class is styled for 2/3 width */}
        <div className={styles.postHeader}>
          <div className={styles.authorInfo}>
            {userAvatar ? (
              <img src={userAvatar} alt={userName} className={styles.authorAvatar} />
            ) : (
              <div className={styles.authorAvatarPlaceholder}>{userName.substring(0, 1)}</div>
            )}
            <div>
              <div className={styles.authorName}>{userName}</div>
              <div className={styles.postTime}>{formatDate(post.createdAt)}</div>
            </div>
          </div>
          <div className={styles.postTypeInfo}>
            <span className={styles.postTypeIcon}>{getPostTypeIcon(post.postType)}</span>
            <span className={styles.postTypeLabel}>{getPostTypeLabel(post.postType)}</span>
          </div>
        </div>

        <div className={styles.postContent}>
          <p>{post.content}</p>
          {linkPreview && (
            <a href={linkPreview.url} target="_blank" rel="noopener noreferrer" className={styles.linkPreview}>
              {linkPreview.image && <img src={linkPreview.image} alt={linkPreview.title || 'Link preview'} />}
              <div className={styles.linkPreviewInfo}>
                <h4>{linkPreview.title}</h4>
                <p>{linkPreview.description}</p>
                <span>{linkPreview.siteName || new URL(linkPreview.url).hostname}</span>
              </div>
            </a>
          )}
        </div>

        <div className={styles.postActions}>
          {/* <button onClick={() => onLike(post._id)} className={`${styles.actionButton} ${isLikedByCurrentUser ? styles.liked : ''}`}>
            <span role="img" aria-label="like">üëç</span> 
            <span>{isLikedByCurrentUser ? '–í–∏ —Å–µ –¥–æ–ø–∞—ì–∞' : '–ú–∏ —Å–µ –¥–æ–ø–∞—ì–∞'} ({post.likes?.length || 0})</span>
          </button> */} {/* Like button removed */}
          <button onClick={() => setShowComments(!showComments)} className={styles.actionButton}>
            <span role="img" aria-label="comment">üí¨</span> 
            <span>–ö–æ–º–µ–Ω—Ç–∞—Ä–∏ ({post.comments?.length || 0})</span>
          </button>
        </div>

        {showComments && (
          <div className={styles.commentsSection}>
            <h4>–ö–æ–º–µ–Ω—Ç–∞—Ä–∏</h4>
            <form onSubmit={handleCommentSubmit} className={styles.commentForm}>
              <textarea
                value={commentContent}
                onChange={(e) => setCommentContent(e.target.value)}
                placeholder="–ù–∞–ø–∏—à–µ—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä..."
                rows={2}
                className={styles.commentTextarea}
              />
              <button type="submit" className={styles.commentSubmitButton} disabled={!commentContent.trim()}>
                –ö–æ–º–µ–Ω—Ç–∏—Ä–∞—ò
              </button>
            </form>
            <div className={styles.commentsList}>
              {(post.comments && post.comments.length > 0) ? (
                post.comments.map(comment => (
                  <div key={comment._id} className={styles.comment}>
                    <div className={styles.commentHeader}>
                       {comment.author?.profileImage ? (
                          <img src={comment.author.profileImage} alt={comment.author.email || 'User'} className={styles.commentAuthorAvatar} />
                        ) : (
                          <div className={styles.commentAuthorAvatarPlaceholder}>{(comment.author?.email || 'U').substring(0,1).toUpperCase()}</div>
                        )}
                      <span className={styles.commentAuthor}>{comment.author?.email || '–ê–Ω–æ–Ω–∏–º–µ–Ω'}</span>
                      <span className={styles.commentTime}>{formatDate(comment.createdAt)}</span>
                    </div>
                    <p className={styles.commentContent}>{comment.content}</p>
                  </div>
                ))
              ) : (
                <p>–ù–µ–º–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ —Å√® —É—à—Ç–µ.</p>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SocialFeed;

// Removed the old PostCard structure that was split into companySidebar and postMainContent
// as the new structure is more typical for a social feed post.
// The data structure for posts (post.user, post.author, post.companyInfo) needs to be consistent
// from the backend or handled more robustly here.
// For example, a post might have a `user` object with `name` and `profilePicture`.
// Admin posts (news, investment) might have a different structure or a generic "Admin" user.
// This example assumes `post.user.name` and `post.user.profilePicture` for user posts,
// and `post.author.name` for other types if `post.user` is not present.
// The `currentUser` prop was removed from PostCard as `useAuth` can be used directly if needed,
// or better, pass specific user data like `currentUserId` if PostCard shouldn't be coupled with AuthContext.
// For simplicity, `useAuth` is now used in PostCard to get the current user for like status.
