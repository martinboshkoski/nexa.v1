import React, { useState, useEffect } from 'react';
import styles from '../../styles/terminal/DocumentGen.module.css';
import Header from '../../components/common/Header';
import { useAuth } from '../../contexts/AuthContext';
import Sidebar from "../../components/terminal/Sidebar";
import ProfileRequired from '../../components/common/ProfileRequired';

const DocumentGen = () => {
  const { token } = useAuth();
  const [documents, setDocuments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [currentStep, setCurrentStep] = useState('categories'); // 'categories', 'templates', 'form', 'preview'
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [formData, setFormData] = useState({});
  const [generatedDocument, setGeneratedDocument] = useState(null);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  // Document categories with their templates - Hardcoded Macedonian
  const documentCategories = {
    labourLaw: {
      title: '–†–∞–±–æ—Ç–Ω–æ –ø—Ä–∞–≤–æ',
      icon: 'üë•',
      color: '#4F46E5',
      description: '–û–±—Ä–∞—Å—Ü–∏ –ø–æ–≤—Ä–∑–∞–Ω–∏ —Å–æ –¥–æ–≥–æ–≤–æ—Ä–∏ –∑–∞ –≤—Ä–∞–±–æ—Ç—É–≤–∞—ö–µ, –æ—Ç–∫–∞–∑–∏ –∏ —Ä–∞–±–æ—Ç–Ω–∏ –æ–¥–Ω–æ—Å–∏.',
      templates: [
        { id: 'employment_contract', name: '–î–æ–≥–æ–≤–æ—Ä –∑–∞ –≤—Ä–∞–±–æ—Ç—É–≤–∞—ö–µ', fields: ['employeeName', 'position', 'salary', 'startDate', 'workingHours'] },
        { id: 'termination_letter', name: '–ò–∑—ò–∞–≤–∞ –∑–∞ –æ—Ç–∫–∞–∑', fields: ['employeeName', 'terminationDate', 'reason', 'finalWorkingDay'] },
        { id: 'job_description', name: '–û–ø–∏—Å –Ω–∞ —Ä–∞–±–æ—Ç–Ω–æ –º–µ—Å—Ç–æ', fields: ['jobTitle', 'department', 'responsibilities', 'requirements'] },
        { id: 'performance_review', name: '–û—Ü–µ–Ω—É–≤–∞—ö–µ –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç', fields: ['employeeName', 'reviewPeriod', 'goals', 'achievements'] },
        { id: 'disciplinary_action', name: '–î–∏—Å—Ü–∏–ø–ª–∏–Ω—Å–∫–∞ –º–µ—Ä–∫–∞', fields: ['employeeName', 'incident', 'actionTaken', 'date'] }
      ]
    },
    corporateLaw: {
      title: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ –ø—Ä–∞–≤–æ',
      icon: 'üè¢',
      color: '#059669',
      description: '–î–æ–∫—É–º–µ–Ω—Ç–∏ –∑–∞ –æ—Å–Ω–æ–≤–∞—ö–µ, —É–ø—Ä–∞–≤—É–≤–∞—ö–µ –∏ —É—Å–æ–≥–ª–∞—Å–µ–Ω–æ—Å—Ç –Ω–∞ –∫–æ–º–ø–∞–Ω–∏–∏.',
      templates: [
        { id: 'board_resolution', name: '–û–¥–ª—É–∫–∞ –Ω–∞ –æ–¥–±–æ—Ä', fields: ['resolutionTitle', 'meetingDate', 'boardMembers', 'decision'] },
        { id: 'shareholders_agreement', name: '–î–æ–≥–æ–≤–æ—Ä –Ω–∞ —Å–æ–¥—Ä—É–∂–Ω–∏—Ü–∏', fields: ['companyName', 'shareholders', 'shareDistribution', 'governanceRules'] },
        { id: 'articles_incorporation', name: '–ê–∫—Ç –∑–∞ –æ—Å–Ω–æ–≤–∞—ö–µ', fields: ['companyName', 'businessPurpose', 'registeredAddress', 'authorizedShares'] },
        { id: 'corporate_bylaws', name: '–°—Ç–∞—Ç—É—Ç –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞', fields: ['companyName', 'boardStructure', 'meetingRules', 'votingProcedures'] },
        { id: 'compliance_policy', name: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞ —É—Å–æ–≥–ª–∞—Å–µ–Ω–æ—Å—Ç', fields: ['policyTitle', 'applicableArea', 'requirements', 'consequences'] }
      ]
    },
    contracts: {
      title: '–î–æ–≥–æ–≤–æ—Ä–∏',
      icon: 'üìã',
      color: '#DC2626',
      description: '–†–∞–∑–ª–∏—á–Ω–∏ –≤–∏–¥–æ–≤–∏ –¥–æ–≥–æ–≤–æ—Ä–∏ –∑–∞ –¥–µ–ª–æ–≤–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏.',
      templates: [
        { id: 'nda', name: '–î–æ–≥–æ–≤–æ—Ä –∑–∞ –¥–æ–≤–µ—Ä–ª–∏–≤–æ—Å—Ç (NDA)', fields: ['partyName', 'disclosingParty', 'purpose', 'duration'] },
        { id: 'service_agreement', name: '–î–æ–≥–æ–≤–æ—Ä –∑–∞ —É—Å–ª—É–≥–∏', fields: ['clientName', 'serviceDescription', 'timeline', 'payment'] },
        { id: 'vendor_contract', name: '–î–æ–≥–æ–≤–æ—Ä —Å–æ –¥–æ–±–∞–≤—É–≤–∞—á', fields: ['vendorName', 'services', 'deliverables', 'terms'] },
        { id: 'partnership_agreement', name: '–î–æ–≥–æ–≤–æ—Ä –∑–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ', fields: ['partnerNames', 'businessPurpose', 'responsibilities', 'profitSharing'] },
        { id: 'licensing_agreement', name: '–î–æ–≥–æ–≤–æ—Ä –∑–∞ –ª–∏—Ü–µ–Ω—Ü–∏—Ä–∞—ö–µ', fields: ['licensor', 'licensee', 'licensedProperty', 'royalties'] }
      ]
    },
    dataProtection: {
      title: '–ó–∞—à—Ç–∏—Ç–∞ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏',
      icon: 'üîí',
      color: '#7C3AED',
      description: '–û–±—Ä–∞—Å—Ü–∏ –∑–∞ GDPR –∏ –∑–∞—à—Ç–∏—Ç–∞ –Ω–∞ –ª–∏—á–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏.',
      templates: [
        { id: 'privacy_policy', name: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç', fields: ['companyName', 'dataTypes', 'processingPurpose', 'retentionPeriod'] },
        { id: 'consent_form', name: '–§–æ—Ä–º—É–ª–∞—Ä –∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ—Å—Ç', fields: ['dataSubject', 'dataTypes', 'purposes', 'rights'] },
        { id: 'data_breach_notice', name: '–ò–∑–≤–µ—Å—Ç—É–≤–∞—ö–µ –∑–∞ –ø–æ–≤—Ä–µ–¥–∞ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏', fields: ['incidentDate', 'affectedData', 'impact', 'measures'] },
        { id: 'dpia_template', name: '–û–±—Ä–∞–∑–µ—Ü –∑–∞ DPIA', fields: ['processingActivity', 'risks', 'safeguards', 'conclusion'] },
        { id: 'data_retention_policy', name: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞ –∑–∞–¥—Ä–∂—É–≤–∞—ö–µ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏', fields: ['dataCategories', 'retentionPeriods', 'disposalMethods', 'responsibilities'] }
      ]
    },
    workSafety: {
      title: '–ë–µ–∑–±–µ–¥–Ω–æ—Å—Ç –ø—Ä–∏ —Ä–∞–±–æ—Ç–∞',
      icon: '‚ö†Ô∏è',
      color: '#EA580C',
      description: '–î–æ–∫—É–º–µ–Ω—Ç–∏ –ø–æ–≤—Ä–∑–∞–Ω–∏ —Å–æ –±–µ–∑–±–µ–¥–Ω–æ—Å—Ç –∏ –∑–¥—Ä–∞–≤—ò–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–∞.',
      templates: [
        { id: 'safety_policy', name: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞ –±–µ–∑–±–µ–¥–Ω–æ—Å—Ç', fields: ['policyScope', 'safetyRules', 'responsibilities', 'procedures'] },
        { id: 'incident_report', name: '–ò–∑–≤–µ—à—Ç–∞—ò –∑–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç', fields: ['incidentDate', 'location', 'description', 'witnesses'] },
        { id: 'risk_assessment', name: '–ü—Ä–æ—Ü–µ–Ω–∫–∞ –Ω–∞ —Ä–∏–∑–∏–∫', fields: ['activityDescription', 'hazards', 'riskLevel', 'controlMeasures'] },
        { id: 'safety_training', name: '–û–±—É–∫–∞ –∑–∞ –±–µ–∑–±–µ–¥–Ω–æ—Å—Ç', fields: ['employeeName', 'trainingType', 'date', 'trainer'] },
        { id: 'emergency_procedure', name: '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞ –∏—Ç–Ω–∏ —Å–ª—É—á–∞–∏', fields: ['emergencyType', 'steps', 'contacts', 'equipment'] }
      ]
    },
    otherTemplates: {
      title: '–û—Å—Ç–∞–Ω–∞—Ç–∏ –æ–±—Ä–∞—Å—Ü–∏',
      icon: 'üìÑ',
      color: '#6B7280',
      description: '–†–∞–∑–Ω–∏ –∫–æ—Ä–∏—Å–Ω–∏ –æ–±—Ä–∞—Å—Ü–∏ –∑–∞ —Å–µ–∫–æ—ò–¥–Ω–µ–≤–Ω–∞ —É–ø–æ—Ç—Ä–µ–±–∞.',
      templates: [
        { id: 'meeting_minutes', name: '–ó–∞–ø–∏—Å–Ω–∏–∫ –æ–¥ —Å–æ—Å—Ç–∞–Ω–æ–∫', fields: ['meetingDate', 'attendees', 'agenda', 'decisions'] },
        { id: 'business_letter', name: '–î–µ–ª–æ–≤–Ω–æ –ø–∏—Å–º–æ', fields: ['recipient', 'subject', 'content', 'sender'] },
        { id: 'invoice_template', name: '–û–±—Ä–∞–∑–µ—Ü –∑–∞ —Ñ–∞–∫—Ç—É—Ä–∞', fields: ['clientName', 'services', 'amount', 'dueDate'] },
        { id: 'memo', name: '–ú–µ–º–æ—Ä–∞–Ω–¥—É–º', fields: ['recipient', 'subject', 'message', 'urgency'] },
        { id: 'press_release', name: '–°–æ–æ–ø—à—Ç–µ–Ω–∏–µ –∑–∞ —ò–∞–≤–Ω–æ—Å—Ç', fields: ['headline', 'content', 'contactInfo', 'releaseDate'] }
      ]
    }
  };

  useEffect(() => {
    fetchDocuments();
  }, [token]);

  const fetchDocuments = async () => {
    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5002/api'}/documents`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setDocuments(data);
      }
    } catch (error) {
      // Silently handle document fetch errors
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleCategorySelect = (categoryKey) => {
    setSelectedCategory(categoryKey);
    setCurrentStep('templates');
  };

  const handleTemplateSelect = (template) => {
    setSelectedTemplate(template);
    setFormData({
      documentType: template.id,
      templateName: template.name,
      category: selectedCategory
    });
    setCurrentStep('form');
  };

  const handleBackToCategories = () => {
    setCurrentStep('categories');
    setSelectedCategory(null);
    setSelectedTemplate(null);
    setFormData({});
  };

  const handleBackToTemplates = () => {
    setCurrentStep('templates');
    setSelectedTemplate(null);
    setFormData({});
  };

  const handleBackToForm = () => {
    setCurrentStep('form');
    setGeneratedDocument(null);
  };

  const handleAdditionalFieldChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setGeneratedDocument(null);
    
    try {
      // Get CSRF token
      const csrfResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5002/api'}/csrf-token`, {
        method: 'GET',
        credentials: 'include'
      });

      if (!csrfResponse.ok) {
        throw new Error('Failed to get CSRF token');
      }

      const { csrfToken } = await csrfResponse.json();

      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5002/api'}/documents/generate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken,
          Authorization: `Bearer ${token}`
        },
        credentials: 'include',
        body: JSON.stringify(formData)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || '–ù–µ—É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞—ö–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç');
      }
      
      const data = await response.json();
      setGeneratedDocument(data.document);
      setCurrentStep('preview');
      fetchDocuments();
    } catch (error) {
      setError(error.message);
    }
  };

  const handleDeleteDocument = async (id) => {
    if (window.confirm('–î–∞–ª–∏ —Å—Ç–µ —Å–∏–≥—É—Ä–Ω–∏ –¥–µ–∫–∞ —Å–∞–∫–∞—Ç–µ –¥–∞ –≥–æ –∏–∑–±—Ä–∏—à–µ—Ç–µ –æ–≤–æ—ò –¥–æ–∫—É–º–µ–Ω—Ç?')) {
      try {
        // Get CSRF token
        const csrfResponse = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5002/api'}/csrf-token`, {
          method: 'GET',
          credentials: 'include'
        });

        if (!csrfResponse.ok) {
          throw new Error('Failed to get CSRF token');
        }

        const { csrfToken } = await csrfResponse.json();

        const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5002/api'}/documents/${id}`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': csrfToken,
            Authorization: `Bearer ${token}`
          },
          credentials: 'include'
        });
        
        if (response.ok) {
          setDocuments(documents.filter(doc => doc._id !== id));
        }
      } catch (error) {
        // Silently handle document deletion errors
      }
    }
  };

  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('mk-MK', options);
  };

  const getFieldDisplayName = (fieldName) => {
    const fieldMap = {
        employeeName: '–ò–º–µ –Ω–∞ –≤—Ä–∞–±–æ—Ç–µ–Ω',
        position: '–ü–æ–∑–∏—Ü–∏—ò–∞',
        salary: '–ü–ª–∞—Ç–∞',
        startDate: '–î–∞—Ç—É–º –Ω–∞ –ø–æ—á–µ—Ç–æ–∫',
        workingHours: '–†–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ',
        terminationDate: '–î–∞—Ç—É–º –Ω–∞ –æ—Ç–∫–∞–∑',
        reason: '–ü—Ä–∏—á–∏–Ω–∞',
        finalWorkingDay: '–ü–æ—Å–ª–µ–¥–µ–Ω —Ä–∞–±–æ—Ç–µ–Ω –¥–µ–Ω',
        jobTitle: '–ù–∞–∑–∏–≤ –Ω–∞ —Ä–∞–±–æ—Ç–Ω–æ –º–µ—Å—Ç–æ',
        department: '–û–¥–¥–µ–ª',
        responsibilities: '–û–¥–≥–æ–≤–æ—Ä–Ω–æ—Å—Ç–∏',
        requirements: '–ü–æ—Ç—Ä–µ–±–Ω–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        reviewPeriod: '–ü–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Ü–µ–Ω—É–≤–∞—ö–µ',
        goals: '–¶–µ–ª–∏',
        achievements: '–ü–æ—Å—Ç–∏–≥–Ω—É–≤–∞—ö–∞',
        incident: '–ò–Ω—Ü–∏–¥–µ–Ω—Ç',
        actionTaken: '–ü—Ä–µ–∑–µ–º–µ–Ω–∞ –º–µ—Ä–∫–∞',
        date: '–î–∞—Ç—É–º',
        resolutionTitle: '–ù–∞—Å–ª–æ–≤ –Ω–∞ –æ–¥–ª—É–∫–∞',
        meetingDate: '–î–∞—Ç—É–º –Ω–∞ —Å–æ—Å—Ç–∞–Ω–æ–∫',
        boardMembers: '–ß–ª–µ–Ω–æ–≤–∏ –Ω–∞ –æ–¥–±–æ—Ä',
        decision: '–û–¥–ª—É–∫–∞',
        companyName: '–ò–º–µ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞',
        shareholders: '–°–æ–¥—Ä—É–∂–Ω–∏—Ü–∏',
        shareDistribution: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–±–∞ –Ω–∞ —É–¥–µ–ª–∏',
        governanceRules: '–ü—Ä–∞–≤–∏–ª–∞ –∑–∞ —É–ø—Ä–∞–≤—É–≤–∞—ö–µ',
        businessPurpose: '–î–µ–ª–æ–≤–Ω–∞ —Ü–µ–ª',
        registeredAddress: '–°–µ–¥–∏—à—Ç–µ',
        authorizedShares: '–û–¥–æ–±—Ä–µ–Ω–∏ –∞–∫—Ü–∏–∏',
        boardStructure: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –æ–¥–±–æ—Ä',
        meetingRules: '–ü—Ä–∞–≤–∏–ª–∞ –∑–∞ —Å–æ—Å—Ç–∞–Ω–æ—Ü–∏',
        votingProcedures: '–ü—Ä–æ—Ü–µ–¥—É—Ä–∏ –∑–∞ –≥–ª–∞—Å–∞—ö–µ',
        policyTitle: '–ù–∞—Å–ª–æ–≤ –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫–∞',
        applicableArea: '–ü—Ä–∏–º–µ–Ω–ª–∏–≤–∞ –æ–±–ª–∞—Å—Ç',
        consequences: '–ü–æ—Å–ª–µ–¥–∏—Ü–∏',
        partyName: '–ò–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∞',
        disclosingParty: '–°—Ç—Ä–∞–Ω–∞ –∫–æ—ò–∞ –æ—Ç–∫—Ä–∏–≤–∞',
        purpose: '–¶–µ–ª',
        duration: '–í—Ä–µ–º–µ—Ç—Ä–∞–µ—ö–µ',
        clientName: '–ò–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç',
        serviceDescription: '–û–ø–∏—Å –Ω–∞ —É—Å–ª—É–≥–∞',
        timeline: '–í—Ä–µ–º–µ–Ω—Å–∫–∞ —Ä–∞–º–∫–∞',
        payment: '–ü–ª–∞—ú–∞—ö–µ',
        vendorName: '–ò–º–µ –Ω–∞ –¥–æ–±–∞–≤—É–≤–∞—á',
        services: '–£—Å–ª—É–≥–∏',
        deliverables: '–ò—Å–ø–æ—Ä–∞–∫–∏',
        terms: '–£—Å–ª–æ–≤–∏',
        partnerNames: '–ò–º–∏—ö–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∏',
        profitSharing: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–±–∞ –Ω–∞ –¥–æ–±–∏–≤–∫–∞',
        licensor: '–î–∞–≤–∞—Ç–µ–ª –Ω–∞ –ª–∏—Ü–µ–Ω—Ü–∞',
        licensee: '–ö–æ—Ä–∏—Å–Ω–∏–∫ –Ω–∞ –ª–∏—Ü–µ–Ω—Ü–∞',
        licensedProperty: '–õ–∏—Ü–µ–Ω—Ü–∏—Ä–∞–Ω –∏–º–æ—Ç',
        royalties: '–ê–≤—Ç–æ—Ä—Å–∫–∏ –ø—Ä–∞–≤–∞',
        dataTypes: '–í–∏–¥–æ–≤–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏',
        processingPurpose: '–¶–µ–ª –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞',
        retentionPeriod: '–ü–µ—Ä–∏–æ–¥ –Ω–∞ –∑–∞–¥—Ä–∂—É–≤–∞—ö–µ',
        dataSubject: '–°—É–±—ò–µ–∫—Ç –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏',
        purposes: '–¶–µ–ª–∏',
        rights: '–ü—Ä–∞–≤–∞',
        incidentDate: '–î–∞—Ç—É–º –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç',
        affectedData: '–ó–∞—Å–µ–≥–Ω–∞—Ç–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏',
        impact: '–í–ª–∏—ò–∞–Ω–∏–µ',
        measures: '–ú–µ—Ä–∫–∏',
        processingActivity: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞',
        risks: '–†–∏–∑–∏—Ü–∏',
        safeguards: '–ó–∞—à—Ç–∏—Ç–Ω–∏ –º–µ—Ä–∫–∏',
        conclusion: '–ó–∞–∫–ª—É—á–æ–∫',
        dataCategories: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –ø–æ–¥–∞—Ç–æ—Ü–∏',
        retentionPeriods: '–ü–µ—Ä–∏–æ–¥–∏ –Ω–∞ –∑–∞–¥—Ä–∂—É–≤–∞—ö–µ',
        disposalMethods: '–ú–µ—Ç–æ–¥–∏ –Ω–∞ –æ—Ç—Å—Ç—Ä–∞–Ω—É–≤–∞—ö–µ',
        policyScope: '–û–ø—Å–µ–≥ –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫–∞',
        safetyRules: '–ë–µ–∑–±–µ–¥–Ω–æ—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª–∞',
        procedures: '–ü—Ä–æ—Ü–µ–¥—É—Ä–∏',
        location: '–õ–æ–∫–∞—Ü–∏—ò–∞',
        description: '–û–ø–∏—Å',
        witnesses: '–°–≤–µ–¥–æ—Ü–∏',
        activityDescription: '–û–ø–∏—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç',
        hazards: '–û–ø–∞—Å–Ω–æ—Å—Ç–∏',
        riskLevel: '–ù–∏–≤–æ –Ω–∞ —Ä–∏–∑–∏–∫',
        controlMeasures: '–ö–æ–Ω—Ç—Ä–æ–ª–Ω–∏ –º–µ—Ä–∫–∏',
        trainingType: '–¢–∏–ø –Ω–∞ –æ–±—É–∫–∞',
        trainer: '–û–±—É—á—É–≤–∞—á',
        emergencyType: '–¢–∏–ø –Ω–∞ –∏—Ç–µ–Ω —Å–ª—É—á–∞—ò',
        steps: '–ß–µ–∫–æ—Ä–∏',
        contacts: '–ö–æ–Ω—Ç–∞–∫—Ç–∏',
        equipment: '–û–ø—Ä–µ–º–∞',
        attendees: '–ü—Ä–∏—Å—É—Ç–Ω–∏',
        agenda: '–ê–≥–µ–Ω–¥–∞',
        recipient: '–ü—Ä–∏–º–∞—á',
        subject: '–ü—Ä–µ–¥–º–µ—Ç',
        content: '–°–æ–¥—Ä–∂–∏–Ω–∞',
        sender: '–ò—Å–ø—Ä–∞—ú–∞—á',
        amount: '–ò–∑–Ω–æ—Å',
        dueDate: '–ö—Ä–∞–µ–Ω –¥–∞—Ç—É–º',
        message: '–ü–æ—Ä–∞–∫–∞',
        urgency: '–ò—Ç–Ω–æ—Å—Ç',
        headline: '–ù–∞—Å–ª–æ–≤',
        contactInfo: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç',
        releaseDate: '–î–∞—Ç—É–º –Ω–∞ –æ–±—ò–∞–≤—É–≤–∞—ö–µ'
    };
    return fieldMap[fieldName] || fieldName.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
  };

  const renderCategories = () => (
    <div className={styles['categories-container']}>
      <div className={styles['document-header']}>
        <h1>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏</h1>
        <p>–ò–∑–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—ò–∞ –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ</p>
      </div>

      <div className={styles['search-container']}>
        <input
          type="text"
          placeholder='–ü—Ä–µ–±–∞—Ä–∞—ò –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...'
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className={styles['search-input']}
        />
      </div>

      <div className={styles['categories-grid']}>
        {Object.entries(documentCategories)
          .filter(([key, category]) => 
            category.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            category.description.toLowerCase().includes(searchTerm.toLowerCase())
          )
          .map(([key, category]) => (
            <div
              key={key}
              className={styles['category-card']}
              onClick={() => handleCategorySelect(key)}
              style={{ '--category-color': category.color }}
            >
              <div className={styles['category-icon']}>{category.icon}</div>
              <h3 className={styles['category-title']}>{category.title}</h3>
              <p className={styles['category-description']}>{category.description}</p>
              <div className={styles['category-templates-count']}>
                {category.templates.length} –¥–æ—Å—Ç–∞–ø–Ω–∏ –æ–±—Ä–∞—Å—Ü–∏
              </div>
            </div>
          ))
        }
      </div>
      
      <div className={styles['document-list']}>
        <h2>–í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏</h2>
      
        {loading ? (
          <p>–°–µ –≤—á–∏—Ç—É–≤–∞–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∏...</p>
        ) : documents.length === 0 ? (
          <p>–ù–µ–º–∞—Ç–µ –∑–∞—á—É–≤–∞–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏.</p>
        ) : (
          documents.map((doc) => (
            <div key={doc._id} className={styles['document-item']}>
              <div>
                <div className={styles['document-item-title']}>{doc.title}</div>
                <div className={styles['document-item-date']}>–ö—Ä–µ–∏—Ä–∞–Ω: {formatDate(doc.createdAt)}</div>
              </div>
              <div className={styles['document-actions']}>
                <button 
                  className={styles['action-button']}
                  onClick={() => setGeneratedDocument(doc)}
                >
                  –ü—Ä–µ–≥–ª–µ–¥–∞—ò
                </button>
                <button 
                  className={`${styles['action-button']} ${styles.delete}`}
                  onClick={() => handleDeleteDocument(doc._id)}
                >
                  –ò–∑–±—Ä–∏—à–∏
                </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );

  const renderTemplates = () => {
    const category = documentCategories[selectedCategory];
    
    return (
      <div className={styles['templates-container']}>
        <div className={styles['breadcrumb']}>
          <button onClick={handleBackToCategories} className={styles['breadcrumb-link']}>
            ‚Üê –ù–∞–∑–∞–¥ –∫–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          </button>
          <span className={styles['breadcrumb-current']}>{category.title}</span>
        </div>

        <div className={styles['templates-header']}>
          <div className={styles['category-info']}>
            <span className={styles['category-icon-large']}>{category.icon}</span>
            <div>
              <h1>{category.title}</h1>
              <p>{category.description}</p>
            </div>
          </div>
        </div>

        <div className={styles['templates-grid']}>
          {category.templates.map((template) => (
            <div
              key={template.id}
              className={styles['template-card']}
              onClick={() => handleTemplateSelect(template)}
            >
              <h3 className={styles['template-title']}>{template.name}</h3>
              <div className={styles['template-fields']}>
                <span className={styles['fields-label']}>–ü–æ—Ç—Ä–µ–±–Ω–∏ –ø–æ–ª–∏—ö–∞:</span>
                <div className={styles['fields-list']}>
                  {template.fields.slice(0, 3).map((field, index) => (
                    <span key={index} className={styles['field-tag']}>
                      {getFieldDisplayName(field)}
                    </span>
                  ))}
                  {template.fields.length > 3 && (
                    <span className={styles['field-tag-more']}>
                      +{template.fields.length - 3} –ø–æ–≤–µ—ú–µ
                    </span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  const renderForm = () => {
    const category = documentCategories[selectedCategory];
    
    return (
      <div className={styles['form-container']}>
        <div className={styles['breadcrumb']}>
          <button onClick={handleBackToCategories} className={styles['breadcrumb-link']}>
            –ù–∞–∑–∞–¥ –∫–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          </button>
          <span className={styles['breadcrumb-separator']}>‚Ä∫</span>
          <button onClick={handleBackToTemplates} className={styles['breadcrumb-link']}>
            {category.title}
          </button>
          <span className={styles['breadcrumb-separator']}>‚Ä∫</span>
          <span className={styles['breadcrumb-current']}>{selectedTemplate.name}</span>
        </div>

        <div className={styles['form-header']}>
          <h1>–ì–µ–Ω–µ—Ä–∏—Ä–∞—ò: {selectedTemplate.name}</h1>
          <p>–ü–æ–ø–æ–ª–Ω–µ—Ç–µ –≥–∏ –ø–æ—Ç—Ä–µ–±–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</p>
        </div>

        {error && <div className={styles['error-message']}>{error}</div>}

        <form onSubmit={handleSubmit} className={styles['document-form']}>
          {selectedTemplate.fields.map((field) => (
            <div key={field} className={styles['form-group']}>
              <label htmlFor={field} className={styles['form-label']}>
                {getFieldDisplayName(field)}
              </label>
              {field.toLowerCase().includes('date') ? (
                <input
                  type="date"
                  id={field}
                  name={field}
                  className={styles['form-input']}
                  value={formData[field] || ''}
                  onChange={handleInputChange}
                  required
                />
              ) : field.toLowerCase().includes('description') || field.toLowerCase().includes('responsibilities') || field.toLowerCase().includes('content') || field.toLowerCase().includes('reason') || field.toLowerCase().includes('decision') || field.toLowerCase().includes('requirements') || field.toLowerCase().includes('goals') || field.toLowerCase().includes('achievements') || field.toLowerCase().includes('incident') || field.toLowerCase().includes('message') ? (
                <textarea
                  id={field}
                  name={field}
                  className={styles['form-textarea']}
                  value={formData[field] || ''}
                  onChange={handleInputChange}
                  rows="4"
                  required
                />
              ) : (
                <input
                  type="text"
                  id={field}
                  name={field}
                  className={styles['form-input']}
                  value={formData[field] || ''}
                  onChange={handleInputChange}
                  required
                />
              )}
            </div>
          ))}

          <div className={styles['form-actions']}>
            <button
              type="button"
              onClick={handleBackToTemplates}
              className={styles['button-secondary']}
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫–æ–Ω –æ–±—Ä–∞—Å—Ü–∏
            </button>
            <button type="submit" className={styles['button-primary']}>
              –ì–µ–Ω–µ—Ä–∏—Ä–∞—ò –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí
            </button>
          </div>
        </form>
      </div>
    );
  };

  const renderPreview = () => (
    <div className={styles['preview-container']}>
      <div className={styles['breadcrumb']}>
        <button onClick={handleBackToCategories} className={styles['breadcrumb-link']}>
          –ù–∞–∑–∞–¥ –∫–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        </button>
        <span className={styles['breadcrumb-separator']}>‚Ä∫</span>
        <button onClick={handleBackToTemplates} className={styles['breadcrumb-link']}>
          {documentCategories[selectedCategory].title}
        </button>
        <span className={styles['breadcrumb-separator']}>‚Ä∫</span>
        <button onClick={handleBackToForm} className={styles['breadcrumb-link']}>
          {selectedTemplate.name}
        </button>
        <span className={styles['breadcrumb-separator']}>‚Ä∫</span>
        <span className={styles['breadcrumb-current']}>–ü—Ä–µ–≥–ª–µ–¥</span>
      </div>

      <div className={styles['preview-header']}>
        <h1>–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç</h1>
        <p>–ü—Ä–µ–≥–ª–µ–¥–∞—ò—Ç–µ –≥–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç.</p>
      </div>

      <div className={styles['document-preview']}>
        <div className={styles['preview-content']}>
          {generatedDocument?.content || '–°–æ–¥—Ä–∂–∏–Ω–∞—Ç–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ—Ç —ú–µ —Å–µ –ø–æ—ò–∞–≤–∏ –æ–≤–¥–µ...'}
        </div>
      </div>

      <div className={styles['preview-actions']}>
        <button
          onClick={handleBackToForm}
          className={styles['button-secondary']}
        >
          ‚Üê –£—Ä–µ–¥–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        </button>
        <button className={styles['button-primary']}>
          –ü—Ä–µ–∑–µ–º–∏ PDF
        </button>
        <button className={styles['button-primary']}>
          –ó–∞—á—É–≤–∞—ò –¥–æ–∫—É–º–µ–Ω—Ç
        </button>
      </div>
    </div>
  );

  const renderCurrentStep = () => {
    switch (currentStep) {
      case 'categories':
        return renderCategories();
      case 'templates':
        return renderTemplates();
      case 'form':
        return renderForm();
      case 'preview':
        return renderPreview();
      default:
        return renderCategories();
    }
  };

  return (
    <ProfileRequired>
      <div>
        <Header isTerminal={true} />
        
        <div className={styles["dashboard-layout"]}>
          <Sidebar />

          <main className={styles["dashboard-main"]}>
            {renderCurrentStep()}
          </main>
        </div>
      </div>
    </ProfileRequired>
  );
};

export default DocumentGen;
